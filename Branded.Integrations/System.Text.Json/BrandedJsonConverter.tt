<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".gen.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// MIT License
// 
// Copyright (c) 2025 Antoine Aubry
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#nullable disable

<#
var possibleIdentifierTypes = new[]
{
    // Only types that are likely to be identifiers are included here
    typeof(int),
    typeof(long),
    typeof(uint),
    typeof(ulong),
    typeof(string),
};

foreach (var possibleIdentifierType in possibleIdentifierTypes)
{
#>
[assembly: global::Branded.SourceGeneratorCustomAttribute(
    typeof(global::System.Text.Json.Serialization.JsonConverter),
    ConstructorArguments = new object[]
    {
        new[]
        {
            typeof(global::Branded.Integrations.System.Text.Json.<#= possibleIdentifierType.Name #>BrandedJsonConverter<,>),
            typeof(global::Branded.BrandedTypePlaceholder),
            typeof(global::Branded.BrandedConverterTypePlaceholder)
        },
    },
    OnlyForInnerTypes = new[]
    {
        typeof(global::<#= possibleIdentifierType.FullName #>)
    }
)]
<#
}
#>

namespace Branded.Integrations.System.Text.Json
{

<#
foreach (var possibleIdentifierType in possibleIdentifierTypes)
{
#>
    internal sealed class <#= possibleIdentifierType.Name #>BrandedJsonConverter<TBranded, TFactory> : global::System.Text.Json.Serialization.JsonConverter<TBranded>
        where TFactory : global::Branded.IBrandedValueConverter<TBranded, global::<#= possibleIdentifierType.FullName #>>, new()
    {
        private readonly TFactory factory = new TFactory();

        public override TBranded Read(
            ref global::System.Text.Json.Utf8JsonReader reader,
            global::System.Type typeToConvert,
            global::System.Text.Json.JsonSerializerOptions options
        )
        {
            return factory.Wrap(reader.Get<#= possibleIdentifierType.Name #>());
        }

        public override void Write(
            global::System.Text.Json.Utf8JsonWriter writer,
            TBranded value,
            global::System.Text.Json.JsonSerializerOptions options
        )
        {
            writer.Write<#= possibleIdentifierType == typeof(string) ? "String" : "Number" #>Value(factory.Unwrap(value));
        }
    }

<# } #>
}